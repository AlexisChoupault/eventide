// Autogenerated from Pigeon (v22.7.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class Calendar (
  val id: String,
  val title: String,
  val hexColor: String,
  val sourceName: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): Calendar {
      val id = pigeonVar_list[0] as String
      val title = pigeonVar_list[1] as String
      val hexColor = pigeonVar_list[2] as String
      val sourceName = pigeonVar_list[3] as String?
      return Calendar(id, title, hexColor, sourceName)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
      title,
      hexColor,
      sourceName,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class Event (
  val id: String? = null,
  val title: String,
  val startDate: Long,
  val endDate: Long,
  val timeZone: String,
  val calendarId: String,
  val description: String? = null,
  val url: String? = null,
  val alarms: List<Alarm?>
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): Event {
      val id = pigeonVar_list[0] as String?
      val title = pigeonVar_list[1] as String
      val startDate = pigeonVar_list[2] as Long
      val endDate = pigeonVar_list[3] as Long
      val timeZone = pigeonVar_list[4] as String
      val calendarId = pigeonVar_list[5] as String
      val description = pigeonVar_list[6] as String?
      val url = pigeonVar_list[7] as String?
      val alarms = pigeonVar_list[8] as List<Alarm?>
      return Event(id, title, startDate, endDate, timeZone, calendarId, description, url, alarms)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
      title,
      startDate,
      endDate,
      timeZone,
      calendarId,
      description,
      url,
      alarms,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class Alarm (
  val minutes: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): Alarm {
      val minutes = pigeonVar_list[0] as Long
      return Alarm(minutes)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      minutes,
    )
  }
}
private open class CalendarActionsPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Calendar.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Event.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Alarm.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is Calendar -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is Event -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is Alarm -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface CalendarActions {
  fun requestCalendarAccess(callback: (Result<Boolean>) -> Unit)
  fun createCalendar(title: String, hexColor: String, callback: (Result<Calendar>) -> Unit)
  fun retrieveCalendars(onlyWritableCalendars: Boolean, callback: (Result<List<Calendar>>) -> Unit)
  fun createOrUpdateEvent(flutterEvent: Event, callback: (Result<Boolean>) -> Unit)

  companion object {
    /** The codec used by CalendarActions. */
    val codec: MessageCodec<Any?> by lazy {
      CalendarActionsPigeonCodec()
    }
    /** Sets up an instance of `CalendarActions` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: CalendarActions?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_calendar_connect.CalendarActions.requestCalendarAccess$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.requestCalendarAccess{ result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_calendar_connect.CalendarActions.createCalendar$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val titleArg = args[0] as String
            val hexColorArg = args[1] as String
            api.createCalendar(titleArg, hexColorArg) { result: Result<Calendar> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_calendar_connect.CalendarActions.retrieveCalendars$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val onlyWritableCalendarsArg = args[0] as Boolean
            api.retrieveCalendars(onlyWritableCalendarsArg) { result: Result<List<Calendar>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_calendar_connect.CalendarActions.createOrUpdateEvent$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val flutterEventArg = args[0] as Event
            api.createOrUpdateEvent(flutterEventArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
